"""Remove weather/consumption forecast/history tables/columns

Revision ID: 784d61fc6f3b
Revises: e60364e4cc0f
Create Date: 2021-03-08 14:39:45.183726

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "784d61fc6f3b"
down_revision = "e60364e4cc0f"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("weather_history")
    op.drop_table("weather_forecast")
    op.drop_table("building_consumption_forecast")
    op.drop_constraint(
        "fk_building_weather_gov_station_grid_id_weather_gov_sta_84e5",
        "building",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_building_noaa_weather_station_id_weather_station",
        "building",
        type_="foreignkey",
    )
    op.drop_column("building", "noaa_weather_station_id")
    op.drop_column("building", "weather_gov_station_grid_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "building",
        sa.Column(
            "weather_gov_station_grid_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "building",
        sa.Column(
            "noaa_weather_station_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.create_foreign_key(
        "fk_building_noaa_weather_station_id_weather_station",
        "building",
        "weather_station",
        ["noaa_weather_station_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_building_weather_gov_station_grid_id_weather_gov_sta_84e5",
        "building",
        "weather_gov_station_grid",
        ["weather_gov_station_grid_id"],
        ["id"],
    )
    op.create_table(
        "building_consumption_forecast",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("building_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "utc_generation_ts",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "utc_forecast_ts",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "avg_consumption_kw", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["building.id"],
            name="fk_building_consumption_forecast_building_id_building",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_building_consumption_forecast"),
    )
    op.create_table(
        "weather_forecast",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "utc_generation_ts",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "utc_forecast_ts",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "dry_temp_f",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "humidity",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "weather_gov_station_grid_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["weather_gov_station_grid_id"],
            ["weather_gov_station_grid.id"],
            name="fk_weather_forecast_weather_gov_station_grid_id_weather_8e79",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_weather_forecast"),
        sa.UniqueConstraint(
            "weather_gov_station_grid_id",
            "utc_generation_ts",
            "utc_forecast_ts",
            name="uq_weather_forecast_weather_gov_station_grid_id",
        ),
    )
    op.create_table(
        "weather_history",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "weather_station_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "utc_ts", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "dry_temp_f",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "humidity",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["weather_station_id"],
            ["weather_station.id"],
            name="fk_weather_history_weather_station_id_weather_station",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_weather_history"),
        sa.UniqueConstraint(
            "weather_station_id", "utc_ts", name="uq_weather_history_weather_station_id"
        ),
    )
    # ### end Alembic commands ###
